#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass paper
\begin_preamble
\usepackage{graphicx}
\usepackage{color}
\usepackage{moreverb}
\usepackage{multirow}
\usepackage{makeidx}
\usepackage{array}
\usepackage{longtable}


\renewcommand{\baselinestretch}{1}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Appendix to Flexim Technical Report
\end_layout

\begin_layout Section
Installation Instructions
\end_layout

\begin_layout Subsection
System Requirements
\end_layout

\begin_layout Enumerate
Make sure that you have a Ubuntu 10.04 Linux machine.
 Other popular Linux distributions may work as well if you are lucky enough.
 
\end_layout

\begin_layout Enumerate
Make sure that you have the latest DMD 2.0 compiler installed.
 If not, go to this page and download "dmd D 2.0 compiler 1-click install
 for Ubuntu": 
\begin_inset CommandInset href
LatexCommand href
target "http://www.digitalmars.com/d/download.html"

\end_inset

.
\end_layout

\begin_layout Subsection
How to Build and Run Flexim
\end_layout

\begin_layout Enumerate
Unpack the zip or tar file containing the Flexim source.
 
\end_layout

\begin_layout Enumerate
In the main directory of the distribution, you can 
\end_layout

\begin_deeper
\begin_layout Itemize
build Flexim using the command: '
\family typewriter
make
\family default
';
\end_layout

\begin_layout Itemize
remove all the built files using the command: '
\family typewriter
make clean
\family default
'.
 
\end_layout

\begin_layout Standard
By default, the flexim binary is placed in the bin/ folder.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Download and unpack cross-compiler-mipsel.tar.bz2 from 
\begin_inset CommandInset href
LatexCommand href
target "http://github.com/mcai/flexim/downloads/"

\end_inset

.
 Use it to compile MIPS32 LE programs to be simulated by Flexim.
 
\end_layout

\begin_layout Enumerate
In the subdirectory build/, you can start simulation with the default simulation
 configuration using the command: 
\begin_inset Quotes eld
\end_inset


\family typewriter
./flexim
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
./flexim --simulation=<simulation-name>
\family default

\begin_inset Quotes erd
\end_inset

.
 Benchmarks and simulations are specified in the subdirectory configs/benchmarks
/ and configs/simulations/, respectively.
\end_layout

\begin_layout Enumerate
You can find configuration and statistics files in the configs/ and stats/
 subdirectories, respectively.
 Some sample XML files are provided for your reference.
\end_layout

\begin_layout Enumerate
Useful tip: As with all other open source projects, you can learn more by
 digging into the Flexim source code.
\end_layout

\begin_layout Section
Development Progress
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main Category
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current Progress
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Functional Simulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int.
 Inst.
 Decoding & Execution
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fp.
 Inst.
 Decoding & Execution
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Call Emulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MIPS LE ELF Exe.
 Loader
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can run statically compiled programs
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Performance Simulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Processor core
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set-associative cache structure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cache coherence
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On-chip interconnect
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed-latency; Perf.
 Sim.
 Planned
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DRAM controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fixed-latency; Perf.
 Sim.
 Planned
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supporting Infrastructure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eventing and callback mechanisms
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK, pervasive use in existing code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Categorized logging mechanism
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK, limited use in existing code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML-based I/O for configs and stats 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Plotting and table generation for simulations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Planned
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Implemented MIPS32 Instructions
\end_layout

\begin_layout Subsection
Basic Instructions
\end_layout

\begin_layout Enumerate

\family typewriter
nop
\family default
 (No operation).
 It does nothing.
\end_layout

\begin_layout Enumerate

\family typewriter
syscall
\family default
 (Sysctem call).
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.syscall(thread.intRegs[2]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sll
\family default
 (Shift Word Left Logical).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}\ll_{SA}5$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RT]] << this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sllv
\family default
 (Shift Word Left Logical Variable).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}\ll R_{T_{4:0}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RT]] << bits(thread.intRegs[this[RS]
], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sra
\family default
 (Shift Word Right Arithmetic).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}^{\pm}\gg_{SA}5$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RT]] >> this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
srav
\family default
 (Shift Word Right Arithmetic Variable).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}^{\pm}\gg R_{T_{4:0}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RT]]
\end_layout

\begin_layout Plain Layout

				>> bits(thread.intRegs[this[RS]], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
srl
\family default
 (Shift Word Right Logical).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}^{\textrm{Ø}}\gg_{SA}5$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RT]] >> this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
srlv
\family default
 (Shift Word Right Logical Variable).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}^{\textrm{Ø}}\gg R_{T_{4:0}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RT]]
\end_layout

\begin_layout Plain Layout

				>> bits(thread.intRegs[this[RS]], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Branching Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of branching operations.
\begin_inset Newline newline
\end_inset

The displacement calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.displacement = sext(this[OFFSET] << 2, 16);
\end_layout

\end_inset

And the branching function is shown as below: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.nnpc = thread.npc + this.displacement;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
b
\family default
 (Branch).
 Meaning: 
\begin_inset Formula $PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.branch(thread);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bal
\family default
 (Branch and Link).
 Meaning: 
\begin_inset Formula $R_{A}=PC+8,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.branch(thread);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
beq
\family default
 (Branch on Equal).
 Meaning: 
\begin_inset Formula $_{IF}\; R_{s}=R_{T},\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation:  
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] == cast(int) thread.intRegs[this[RT]])
 {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
beqz
\family default
 (Branch on Equal to Zero).
 Meaning: 
\begin_inset Formula $_{IF}\; R_{S}=0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] == 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bgez
\family default
 (Branch on Greater Than or Equal to Zero).
 Meaning: 
\begin_inset Formula $_{IF}\; R_{S}\geq0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] >= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bgezal
\family default
 (Branch on Greater Than or Equal to Zero and Link).
 Meaning: 
\begin_inset Formula $R_{A}=PC+8;\;_{IF}\; R_{S}\geq0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] >= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bgtz
\family default
 (Branch on Greater Than Zero).
 Meaning: 
\begin_inset Formula $IF\; R_{S}>0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] > 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
blez
\family default
 (Branch on Less Than or Equal to Zero).
 Meaning: 
\begin_inset Formula $IF\; R_{S}\leq0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] <= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bltz
\family default
 (Branch on Less Than Zero).
 Meaning: 
\begin_inset Formula $IF\; R_{S}<0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] < 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bltzal
\family default
 (Branch on Less Than Zero and Link).
 Meaning: 
\begin_inset Formula $R_{A}=PC+8;\;_{IF}\; R_{S}<0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] < 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bne
\family default
 (Branch on Not Equal).
 Meaning: 
\begin_inset Formula $_{IF}\; R_{S}\neq R_{T},\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] != cast(int) thread.intRegs[this[RT]])
 {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bnez
\family default
(Branch on Not Equal to Zero).
 Meaning: 
\begin_inset Formula $_{IF}\; R_{S}\neq0,\; PC+=_{OFF}18^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] != 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bc1f
\family default
 (Branch on FP False).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bc1t
\family default
 (Branch on FP True).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bc1fl
\family default
 (Branch on FP False Likely).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	thread.npc = thread.nnpc;
\end_layout

\begin_layout Plain Layout

	thread.nnpc = thread.nnpc + uint.sizeof;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
bc1tl
\family default
 (Branch on FP True Likely).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	thread.npc = thread.nnpc;
\end_layout

\begin_layout Plain Layout

	thread.nnpc = thread.nnpc + uint.sizeof;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Jumping Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of jumping operations.
\begin_inset Newline newline
\end_inset

The abstract definition of target PC calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

abstract uint targetPc(Thread thread);
\end_layout

\end_inset

And the jumping function is shown as below: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.nnpc = addr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
j
\family default
 (Jump).
 Meaning: 
\begin_inset Formula $PC=PC_{31:28}::_{ADDR}28^{\textrm{Ø}}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

Its target PC calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return mbits(thread.npc, 32, 28) | this.target;
\end_layout

\end_inset

Implementation:  
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
jal
\family default
 (Jump and Link).
 Meaning: 
\begin_inset Formula $R_{A}=PC+8;\; PC=PC_{31:28}::_{ADDR}28^{\textrm{Ø}}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

Its target PC calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return mbits(thread.npc, 32, 28) | this.target;
\end_layout

\end_inset

Implementation:  
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
jalr
\family default
 (Jump and Link Register).
 Meaning: 
\begin_inset Formula $R_{D}=PC+8;\; PC=R_{S}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

Its target PC calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]];
\end_layout

\end_inset

Implementation:  
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
jr
\family default
 (Jump Register).
 Meaning: 
\begin_inset Formula $PC=R_{S}$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

Its target PC calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]];
\end_layout

\end_inset

Implementation:  
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Floating Point Arithmetic Instructions
\end_layout

\begin_layout Enumerate

\family typewriter
add_d
\family default
 (Add Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs + ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sub_d
\family default
 (Subtract Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs - ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mul_d
\family default
 (Multiply Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs * ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
div_d
\family default
 (Divide Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs / ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sqrt_d
\family default
 (Square Root Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = sqrt(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
abs_d
\family default
 (Absolute Value Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = fabs(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
neg_d
\family default
 (Negate Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = -1 * fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mov_d
\family default
 (Move Register Double).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
add_s
\family default
 (Add Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs + ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sub_s
\family default
 (Subtract Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs - ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mul_s
\family default
 (Multiply Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs * ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
div_s
\family default
 (Divide Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = fs / ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sqrt_s
\family default
 (Square Root Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = sqrt(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
abs_s
\family default
 (Absolute Value Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = fabs(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
neg_s
\family default
 (Negate Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = -fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mov_s
\family default
 (Move Register Single).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_d_s
\family default
 (Convert from single floating point to double floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_w_s
\family default
 (Convert from single floating point to 32-bit fixed point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

uint fd = cast(uint) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_l_s
\family default
 (Convert from single floating point to longword fixed point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

ulong fd = cast(ulong) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_s_d
\family default
 (Convert from double floating point to single floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_w_d
\family default
 (Convert from double floating point to 32-bit fixed point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

uint fd = cast(uint) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_l_d
\family default
 (Convert from double floating point to longword fixed point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

ulong fd = cast(ulong) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_s_w
\family default
 (Convert from 32-bit fixed point to single floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_d_w
\family default
 (Convert from 32-bit fixed point to double floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_s_l
\family default
 (Convert from longword fixed point to single floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong fs = thread.floatRegs.getUlong(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cvt_d_l
\family default
 (Convert from longword fixed point to double floating point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong fs = thread.floatRegs.getUlong(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
c_<cond>_d
\family default
 (Floating Point compare double) type instructions, which include 
\family typewriter
c_f_d
\family default
, 
\family typewriter
c_un_d
\family default
, 
\family typewriter
c_eq_d
\family default
, 
\family typewriter
c_ueq_d
\family default
, 
\family typewriter
c_olt_d
\family default
, 
\family typewriter
c_ult_d
\family default
, 
\family typewriter
c_ole_d
\family default
, 
\family typewriter
c_ule_d
\family default
, 
\family typewriter
c_sf_d
\family default
, 
\family typewriter
c_ngle_d
\family default
, 
\family typewriter
c_seq_d
\family default
, 
\family typewriter
c_ngl_d
\family default
, 
\family typewriter
c_lt_d
\family default
, 
\family typewriter
c_nge_d
\family default
, 
\family typewriter
c_le_d
\family default
 and 
\family typewriter
c_ngt_d
\family default
.
 Meaning: .
 Implementation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

bool less;
\end_layout

\begin_layout Plain Layout

bool equal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool unordered = isnan(fs) || isnan(ft);
\end_layout

\begin_layout Plain Layout

if(unordered) {
\end_layout

\begin_layout Plain Layout

	equal = false;
\end_layout

\begin_layout Plain Layout

	less = false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	equal = fs == ft;
\end_layout

\begin_layout Plain Layout

	less = fs < ft;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint cond = this[COND];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(((cond&0x4) && less)||((cond&0x2) && equal)||((cond&0x1) && unordered))
 {
\end_layout

\begin_layout Plain Layout

	setFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	clearFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.fcsr = fcsr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
c_<cond>_s
\family default
 (Floating Point compare single) type instructions, which include 
\family typewriter
c_f_s
\family default
, 
\family typewriter
c_un_s
\family default
, 
\family typewriter
c_eq_s
\family default
, 
\family typewriter
c_ueq_s
\family default
, 
\family typewriter
c_olt_s
\family default
, 
\family typewriter
c_ult_s
\family default
, 
\family typewriter
c_ole_s
\family default
, 
\family typewriter
c_ule_s
\family default
, 
\family typewriter
c_sf_s
\family default
, 
\family typewriter
c_ngle_s
\family default
, 
\family typewriter
c_seq_s
\family default
, 
\family typewriter
c_ngl_s
\family default
, 
\family typewriter
c_lt_s
\family default
, 
\family typewriter
c_nge_s
\family default
, 
\family typewriter
c_le_s
\family default
 and 
\family typewriter
c_ngt_s
\family default
.
 Meaning: .
 Implementation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

bool less;
\end_layout

\begin_layout Plain Layout

bool equal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool unordered = isnan(fs) || isnan(ft);
\end_layout

\begin_layout Plain Layout

if(unordered) {
\end_layout

\begin_layout Plain Layout

	equal = false;
\end_layout

\begin_layout Plain Layout

	less = false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	equal = fs == ft;
\end_layout

\begin_layout Plain Layout

	less = fs < ft;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint cond = this[COND];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(((cond&0x4) && less)||((cond&0x2) && equal)||((cond&0x1) && unordered))
 {
\end_layout

\begin_layout Plain Layout

	setFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	clearFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.fcsr = fcsr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mfc1
\family default
 (Move Word From Floating Point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = fs;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
cfc1
\family default
 (Move Control Word From Floating Point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(this[FS] == 31) {
\end_layout

\begin_layout Plain Layout

	rt = fcsr;
\end_layout

\begin_layout Plain Layout

	thread.intRegs[this[RT]] = rt;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mtc1
\family default
 (Move Word To Floating Point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(rt, this[FS]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
ctc1
\family default
 (Move Control Word To Floating Point).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(this[FS]) {
\end_layout

\begin_layout Plain Layout

	thread.miscRegs.fcsr = rt;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integer Arithmetic Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of integer arithmetic operations.
\begin_inset Newline newline
\end_inset

Its immmediate value is calculated as:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.imm = cast(short) machInst[INTIMM];
\end_layout

\end_inset

Its zero-extended immediate value is calculated as:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.zextImm = 0x0000FFFF & machInst[INTIMM];
\end_layout

\end_inset

Its sign-extended immediate value is calculated as:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.sextImm = sext(machInst[INTIMM], 16);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
add
\family default
 (Add Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}+R_{T}$
\end_inset

.
 Overflow trap.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				+ cast(int) thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Add: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
addi
\family default
 (Add Immediate Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}+_{const}16^{\pm}$
\end_inset

.
 Overflow trap.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] + this.sextImm;
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Addi: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
addiu
\family default
 (Add Immediate Unsigned Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}+_{const}16^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] + this.sextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
addu
\family default
 (Add Unsigned Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}+R_{T}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				+ cast(int) thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sub
\family default
 (Subtract Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}-R_{T}$
\end_inset

.
 Overflow trap.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				- cast(int) thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Sub: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
subu
\family default
 (Subtract Unsigned Word).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}-R_{T}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				- cast(int) thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
and
\family default
 (And).
 Meaning: 
\begin_inset Formula $R_{D}=R_{s}\&R_{T}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] & thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
andi
\family default
 (And Immediate).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}\&_{const}16^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] & this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
nor
\family default
 (Nor).
 Meaning: 
\begin_inset Formula $R_{D}=\sim(R_{S}|R_{T})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = ~(thread.intRegs[this[RS]] | thread.intRegs[this[RT]]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
or
\family default
 (Or).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}|R_{T}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] | thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
ori
\family default
 (Or Immediate).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}|_{const}16^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] | this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
xor
\family default
 (Exclusive Or).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}\oplus R_{T}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] ^ thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
xori
\family default
 (Exclusive Or Immediate).
 Meaning: 
\begin_inset Formula $R_{D}=R_{S}\oplus_{const}16^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] ^ this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
slt
\family default
 (Set on Less Than).
 Meaning: 
\begin_inset Formula $R_{D}=(R_{S}^{\pm}<R_{T}^{\pm})?1:0$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				< cast(int) thread.intRegs[this[RT]] ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
slti
\family default
 (Set on Less Than Immediate).
 Meaning: 
\begin_inset Formula $R_{D}=(R_{S}^{\pm}<_{const}16^{\pm})?1:0$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] < this.sextImm
 ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sltiu
\family default
 (Set on Less Than Immediate Unsigned).
 Meaning: 
\begin_inset Formula $R_{D}=(R_{S}^{\textrm{Ø}}<_{const}16^{\textrm{Ø}})?1:0$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(uint) thread.intRegs[this[RS]] < this.zextImm
 ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sltu
\family default
 (Set on Less Than Unsigned).
 Meaning: 
\begin_inset Formula $R_{D}=(R_{S}^{\textrm{Ø}}<R_{T}^{\textrm{Ø}})?1:0$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				< cast(uint) thread.intRegs[this[RT]] ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lui
\family default
 (Load Upper Immediate).
 Meaning: 
\begin_inset Formula $R_{D}=_{const}16\ll16$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = this.imm << 16;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
divu
\family default
 (Divide Unsigned Word).
 Meaning: 
\begin_inset Formula $L_{O}=R_{S}^{\textrm{Ø}}/R_{T}^{Ø};\; H_{I}=R_{S}^{Ø}\; mod\; R_{T}^{Ø}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong rs = 0;
\end_layout

\begin_layout Plain Layout

ulong rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = 0;
\end_layout

\begin_layout Plain Layout

uint hi = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = thread.intRegs[this[RS]];
\end_layout

\begin_layout Plain Layout

rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(rt != 0) {
\end_layout

\begin_layout Plain Layout

	lo = cast(uint) (rs / rt);
\end_layout

\begin_layout Plain Layout

	hi = cast(uint) (rs % rt);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
div
\family default
 (Divide Word).
 Meaning: 
\begin_inset Formula $L_{O}=R_{S}^{\pm}/R_{T}^{\pm};\; H_{I}=R_{S}^{\pm}\; mod\; R_{T}^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

long rs = 0;
\end_layout

\begin_layout Plain Layout

long rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = 0;
\end_layout

\begin_layout Plain Layout

uint hi = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = sext(thread.intRegs[this[RS]], 32);
\end_layout

\begin_layout Plain Layout

rt = sext(thread.intRegs[this[RT]], 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(rt != 0) {
\end_layout

\begin_layout Plain Layout

	lo = cast(uint) (rs / rt);
\end_layout

\begin_layout Plain Layout

	hi = cast(uint) (rs % rt);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mflo
\family default
 (Move From LO).
 Meaning: 
\begin_inset Formula $R_{D}=L_{O}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.miscRegs.lo;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mfhi
\family default
 (Move From HI).
 Meaning: 
\begin_inset Formula $R_{D}=H_{I}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.miscRegs.hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mtlo
\family default
 (Move To LO).
 Meaning: 
\begin_inset Formula $L_{O}=R_{D}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.miscRegs.lo = thread.intRegs[this[RD]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mthi
\family default
 (Move To HI).
 Meaning: 
\begin_inset Formula $H_{I}=R_{D}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.miscRegs.hi = thread.intRegs[this[RD]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mult
\family default
 (Multiply Word).
 Meaning: 
\begin_inset Formula $A_{CC}=R_{S}^{\pm}\times R_{T}^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

long rs = 0;
\end_layout

\begin_layout Plain Layout

long rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = sext(thread.intRegs[this[RS]], 32);
\end_layout

\begin_layout Plain Layout

rt = sext(thread.intRegs[this[RT]], 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

long val = rs * rt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = cast(uint) bits64(val, 31, 0);
\end_layout

\begin_layout Plain Layout

uint hi = cast(uint) bits64(val, 63, 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
multu
\family default
 (Multiply Unsigned Word).
 Meaning: 
\begin_inset Formula $A_{CC}=R_{S}^{\textrm{Ø}}\times R_{T}^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong rs = 0;
\end_layout

\begin_layout Plain Layout

ulong rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = thread.intRegs[this[RS]];
\end_layout

\begin_layout Plain Layout

rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ulong val = rs * rt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = cast(uint) bits64(val, 31, 0);
\end_layout

\begin_layout Plain Layout

uint hi = cast(uint) bits64(val, 63, 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Memory Access Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of memory access operations.
\begin_inset Newline newline
\end_inset

Its displacement value is calculated as:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.displacement = sext(machInst[OFFSET], 16);
\end_layout

\end_inset

And its effective address is calculated as (overridable):
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]] + this.displacement;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lb
\family default
 (Load Byte).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}8(R_{S}+_{OFF}16^{\pm})^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

byte mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readByte(this.ea(thread), cast(ubyte*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lbu
\family default
 (Load Byte Unsigned).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}8(R_{S}+_{OFF}16^{\pm})^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ubyte mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readByte(this.ea(thread), &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lh
\family default
 (Load Halfword).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}16(R_{S}+_{OFF}16^{\pm})^{\pm}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

short mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readHalfWord(this.ea(thread), cast(ushort*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lhu
\family default
 (Load Halfword Unsigned).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}16(R_{S}+_{OFF}16^{\pm})^{\textrm{Ø}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ushort mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readHalfWord(this.ea(thread), &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lw
\family default
 (Load Word).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}32(R_{S}+_{OFF}16^{\pm})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), cast(uint*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lwl
\family default
 (Load Word Left).
\begin_inset Newline newline
\end_inset

Its overriden effective address calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset

Meaning: 
\begin_inset Formula $R_{T}=LoadWordLeft(R_{S}+_{OFF}16^{\pm})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem_shift = 24 - 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = (mem << mem_shift) | (thread.intRegs[this[RT]] & mask(mem_shift));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = rt;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lwr
\family default
 (Load Word Right).
\begin_inset Newline newline
\end_inset

Its overriden effective address calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset

Meaning: 
\begin_inset Formula $R_{T}=LoadWordRight(R_{S}+_{OFF}16^{\pm})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem_shift = 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = (thread.intRegs[this[RT]] & (mask(mem_shift) << (32 - mem_shift)))
\end_layout

\begin_layout Plain Layout

				| (mem >> mem_shift);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = rt;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
ll
\family default
 (Load Linked Word).
 Meaning: 
\begin_inset Formula $R_{T}=_{MEM}32(R_{S}+_{OFF}16^{\pm});\; LINK$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = 0;		
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), &mem);		
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
lwc1
\family default
 (Load Word to Coprocessor-1).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), &mem);			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(mem, this[FT]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
ldc1
\family default
 (Load Doubleword to Coprocessor-1).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readDoubleWord(this.ea(thread), &mem);			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(mem, this[FT]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sb
\family default
 (Store Byte).
 Meaning: 
\begin_inset Formula $_{MEM}8(R_{T}+_{OFF}16^{\pm})=R_{S_{7:0}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ubyte mem = cast(ubyte) bits(thread.intRegs[this[RT]], 7, 0);
\end_layout

\begin_layout Plain Layout

thread.mem.writeByte(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sh
\family default
 (Store Halfword).
 Meaning: 
\begin_inset Formula $_{MEM}16(R_{T}+_{OFF}16^{\pm})=R_{S_{15:0}}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ushort mem = cast(ushort) bits(thread.intRegs[this[RT]], 15, 0);
\end_layout

\begin_layout Plain Layout

thread.mem.writeHalfWord(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sw
\family default
 (Store Word).
 Meaning: 
\begin_inset Formula $_{MEM}32(R_{T}+_{OFF}16^{\pm})=R_{S}$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
swl
\family default
 (Store Word Left).
\begin_inset Newline newline
\end_inset

Its overriden effective address calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset

Meaning: 
\begin_inset Formula $StoreWordLeft(R_{T}+_{OFF}16^{\pm},R_{S})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint reg_shift = 24 - 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

uint mem_shift = 32 - reg_shift;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mem = (mem & (mask(reg_shift) << mem_shift)) | (thread.intRegs[this[RT]]
 >> reg_shift);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(ea, mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
swr
\family default
 (Store Word Right).
\begin_inset Newline newline
\end_inset

Its overriden effective address calculation is shown as below:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset

Meaning: 
\begin_inset Formula $StoreWordRight(R_{T}+_{OFF}16^{\pm},R_{S})$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint reg_shift = 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mem = thread.intRegs[this[RT]] << reg_shift | (mem & (mask(reg_shift)));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(ea, mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sc
\family default
 (Store Conditional Word).
 Meaning: 
\begin_inset Formula $_{MEM}32(R_{S}+_{OFF}16^{\pm})=R_{T};\; R_{T}=1$
\end_inset

.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), rt);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = 1;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
swc1
\family default
 (Store Word from Coprocessor-1).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint ft = thread.floatRegs.getUint(this[FT]);			
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), ft);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
sdc1
\family default
 (Store Doubleword from Coprocessor-1).
 Meaning: .
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong ft = thread.floatRegs.getUlong(this[FT]);			
\end_layout

\begin_layout Plain Layout

thread.mem.writeDoubleWord(this.ea(thread), ft);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implemented System Calls
\end_layout

\begin_layout Enumerate
exit.
 Syscall number: 1.
 Meaning: terminate the current process.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

logging.haltf(LogCategory.SYSCALL, "target called exit(%d)", thread.getSyscallArg(0
) & 0xff);
\end_layout

\begin_layout Plain Layout

return 1;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
read.
 Syscall number: 3; Meaning: read from a file descriptor.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

size_t count = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* buf = malloc(count);
\end_layout

\begin_layout Plain Layout

ssize_t ret = core.sys.posix.unistd.read(fd, buf, count);
\end_layout

\begin_layout Plain Layout

if(ret > 0) {
\end_layout

\begin_layout Plain Layout

	thread.mem.writeBlock(buf_addr, ret, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
write.
 Syscall number: 4; Meaning: write to a file descriptor.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

size_t count = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* buf = malloc(count);
\end_layout

\begin_layout Plain Layout

thread.mem.readBlock(buf_addr, count, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

ssize_t ret = core.sys.posix.unistd.write(fd, buf, count);
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
open.
 Syscall number: 5, Meaning: open a file or device.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

char path[MAXBUFSIZE];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint addr = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint tgtFlags = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

uint mode = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int strlen = thread.mem.readString(addr, MAXBUFSIZE, &path[0]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// translate open flags
\end_layout

\begin_layout Plain Layout

int hostFlags = 0;
\end_layout

\begin_layout Plain Layout

foreach(t; openFlagTable) {
\end_layout

\begin_layout Plain Layout

	if(tgtFlags & t.tgtFlag) {
\end_layout

\begin_layout Plain Layout

		tgtFlags &= ~t.tgtFlag;
\end_layout

\begin_layout Plain Layout

		hostFlags |= t.hostFlag;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// any target flags left?
\end_layout

\begin_layout Plain Layout

if(tgtFlags != 0)
\end_layout

\begin_layout Plain Layout

		logging.fatalf(LogCategory.SYSCALL,
\end_layout

\begin_layout Plain Layout

			"Syscall: open: cannot decode flags 0x%x", tgtFlags);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Adjust path for current working directory
\end_layout

\begin_layout Plain Layout

path = thread.process.fullPath(to!(string)(path));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// open the file
\end_layout

\begin_layout Plain Layout

int fd = open(path.ptr, hostFlags, mode);
\end_layout

\begin_layout Plain Layout

return fd;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
close.
 Syscall number: 6; Meaning: close a file descriptor.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

int ret = close(fd);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lseek.
 Syscall number: 19; Meaning: reposition read/write file offset.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fildes = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

off_t offset = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

int whence = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

off_t ret = lseek(fildes, offset, whence);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getpid.
 Syscall number: 20.
 Meaning: get process identification.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.pid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getuid.
 Syscall number: 24.
 Meaning: get real user ID.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.uid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
brk.
 Syscall number: 45.
 Meaning: change the amount of space allocated for the calling process's
 data segment.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint oldbrk, newbrk;
\end_layout

\begin_layout Plain Layout

uint oldbrk_rnd, newbrk_rnd;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

newbrk = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

oldbrk = thread.process.brk;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(newbrk == 0) {
\end_layout

\begin_layout Plain Layout

	return thread.process.brk;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

newbrk_rnd = Rounding!(uint).roundUp(newbrk, MEM_PAGESIZE);
\end_layout

\begin_layout Plain Layout

oldbrk_rnd = Rounding!(uint).roundUp(oldbrk, MEM_PAGESIZE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(newbrk > oldbrk) {
\end_layout

\begin_layout Plain Layout

	thread.mem.map(oldbrk_rnd, newbrk_rnd - oldbrk_rnd,
\end_layout

\begin_layout Plain Layout

		MemoryAccessType.READ | MemoryAccessType.WRITE);
\end_layout

\begin_layout Plain Layout

} else if(newbrk < oldbrk) {
\end_layout

\begin_layout Plain Layout

	thread.mem.unmap(newbrk_rnd, oldbrk_rnd - newbrk_rnd);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

thread.process.brk = newbrk;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return thread.process.brk;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getgid.
 Syscall number: 47.
 Meaning: get real group ID.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.gid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
geteuid.
 Syscall number: 49.
 Meaning: get effective user ID.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.euid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getegid.
 Syscall number: 50.
 Meaning: get effective group ID.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.egid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
fstat.
 Syscall number: 28.
 Meaning: get file status.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

stat_t* buf = cast(stat_t*)(malloc(stat_t.sizeof));
\end_layout

\begin_layout Plain Layout

int ret = fstat(fd, buf);
\end_layout

\begin_layout Plain Layout

if(ret >= 0) {
\end_layout

\begin_layout Plain Layout

	thread.mem.writeBlock(buf_addr, stat_t.sizeof, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
uname.
 Syscall number: 122.
 Meaning: get name and information about current Linux kernel.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

utsname un = {"Linux", "sim", "2.6", "Tue Apr 5 12:21:57 UTC 2005", "mips"};
\end_layout

\begin_layout Plain Layout

thread.mem.writeBlock(thread.getSyscallArg(0), un.sizeof, cast(ubyte*) &un);
\end_layout

\begin_layout Plain Layout

return 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
_llseek.
 Syscall number: 140.
 Meaning: move extended read/write file pointer.
 Implementation: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint offset_high = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

uint offset_low = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

uint result_addr = thread.getSyscallArg(3);
\end_layout

\begin_layout Plain Layout

int whence = thread.getSyscallArg(4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(offset_high == 0) {
\end_layout

\begin_layout Plain Layout

	off_t lseek_ret = lseek(fd, offset_low, whence);
\end_layout

\begin_layout Plain Layout

	if(lseek_ret >= 0) {
\end_layout

\begin_layout Plain Layout

		ret = 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else {
\end_layout

\begin_layout Plain Layout

		ret = -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	ret = -1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation of Key OoO Pipeline Structures and Pipeline Stages
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout Standard

\size footnotesize
\color red
(Pre-release, Documentation-in-Progress)
\end_layout

\begin_layout Subsection
Pipeline Stages
\end_layout

\begin_layout Standard

\size footnotesize
\color red
(Pre-release, Documentation-in-Progress)
\end_layout

\begin_layout Section
Implementation of the directory-based MESI Cache Coherence Protocol
\end_layout

\begin_layout Standard
The implementation of the directory-based MESI protocols are as follows.
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint set, way, tag;
\end_layout

\begin_layout Plain Layout

MESIState state;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool hit = this.cache.findBlock(addr, set, way, tag, state, true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint dumbTag;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(!hit) {
\end_layout

\begin_layout Plain Layout

  way = this.cache.replaceBlock(set);
\end_layout

\begin_layout Plain Layout

  this.cache.getBlock(set, way, dumbTag, state);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DirLock dirLock = this.cache.dir.dirLocks[set];
\end_layout

\begin_layout Plain Layout

if(!dirLock.lock()) {
\end_layout

\begin_layout Plain Layout

  if(isBlocking) {
\end_layout

\begin_layout Plain Layout

    onCompletedCallback(true, set, way, state, tag, dirLock);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else {
\end_layout

\begin_layout Plain Layout

    this.retry({this.findAndLock(addr, isBlocking, isRead, true, onCompletedCallba
ck);});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

  this.cache[set][way].transientTag = tag;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  if(!hit && state != MESIState.INVALID) {
\end_layout

\begin_layout Plain Layout

    this.schedule(
\end_layout

\begin_layout Plain Layout

      {
\end_layout

\begin_layout Plain Layout

        this.evict(set, way, 
\end_layout

\begin_layout Plain Layout

          (bool hasError)
\end_layout

\begin_layout Plain Layout

          {
\end_layout

\begin_layout Plain Layout

            uint dumbTag;
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

            if(!hasError) {
\end_layout

\begin_layout Plain Layout

              this.stat.evictions++;
\end_layout

\begin_layout Plain Layout

              this.cache.getBlock(set, way, dumbTag, state);
\end_layout

\begin_layout Plain Layout

              onCompletedCallback(false, set, way, state, tag, dirLock);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            else {
\end_layout

\begin_layout Plain Layout

              this.cache.getBlock(set, way, dumbTag, state);
\end_layout

\begin_layout Plain Layout

              dirLock.unlock();
\end_layout

\begin_layout Plain Layout

              onCompletedCallback(true, set, way, state, tag, dirLock);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          });
\end_layout

\begin_layout Plain Layout

      }, this.hitLatency);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else {      
\end_layout

\begin_layout Plain Layout

    this.schedule(
\end_layout

\begin_layout Plain Layout

      {
\end_layout

\begin_layout Plain Layout

        onCompletedCallback(false, set, way, state, tag, dirLock);
\end_layout

\begin_layout Plain Layout

      },
\end_layout

\begin_layout Plain Layout

    this.hitLatency);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
load(addr, isRetry, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.findAndLock(addr, false, true, isRetry,
\end_layout

\begin_layout Plain Layout

  (bool hasError, uint set, uint way, MESIState state, uint tag, DirLock
 dirLock)
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    if(!hasError) {
\end_layout

\begin_layout Plain Layout

      if(!isReadHit(state)) {
\end_layout

\begin_layout Plain Layout

        this.readRequest(this.next, tag,
\end_layout

\begin_layout Plain Layout

        (bool hasError, bool isShared) 
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          if(!hasError) {
\end_layout

\begin_layout Plain Layout

            this.cache.setBlock(set, way, tag, isShared ? MESIState.SHARED
\end_layout

\begin_layout Plain Layout

              : MESIState.EXCLUSIVE);
\end_layout

\begin_layout Plain Layout

            this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

            dirLock.unlock();               
\end_layout

\begin_layout Plain Layout

            onCompletedCallback();
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

          else {
\end_layout

\begin_layout Plain Layout

            dirLock.unlock();
\end_layout

\begin_layout Plain Layout

            this.retry({this.load(addr, true, onCompletedCallback);});
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        });
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      else {
\end_layout

\begin_layout Plain Layout

        this.cache.accessBlock(set, way); 
\end_layout

\begin_layout Plain Layout

        dirLock.unlock();         
\end_layout

\begin_layout Plain Layout

        onCompletedCallback();
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      this.retry({this.load(addr, true, onCompletedCallback);});
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
store(addr, isRetry, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.findAndLock(addr, false, false, isRetry, 
\end_layout

\begin_layout Plain Layout

  (bool hasError, uint set, uint way, MESIState state, uint tag, DirLock
 dirLock)
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    if(!hasError) {
\end_layout

\begin_layout Plain Layout

      if(!isWriteHit(state)) {
\end_layout

\begin_layout Plain Layout

        this.writeRequest(this.next, tag,
\end_layout

\begin_layout Plain Layout

          (bool hasError)
\end_layout

\begin_layout Plain Layout

          {
\end_layout

\begin_layout Plain Layout

            if(!hasError) {
\end_layout

\begin_layout Plain Layout

              this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

              this.cache.setBlock(set, way, tag, MESIState.MODIFIED);
\end_layout

\begin_layout Plain Layout

              dirLock.unlock();
\end_layout

\begin_layout Plain Layout

              onCompletedCallback();
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            else {
\end_layout

\begin_layout Plain Layout

              dirLock.unlock();
\end_layout

\begin_layout Plain Layout

              this.retry({this.store(addr, true, onCompletedCallback);});
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          });
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      else {
\end_layout

\begin_layout Plain Layout

        this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

        this.cache.setBlock(set, way, tag, MESIState.MODIFIED);
\end_layout

\begin_layout Plain Layout

        dirLock.unlock();
\end_layout

\begin_layout Plain Layout

        onCompletedCallback();
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      this.retry({this.store(addr, true, onCompletedCallback);});
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
evict(set, way, onCompletedCallback)
\family default
.
 
\begin_inset Newline newline
\end_inset

Constant-latency (2) on-chip interconnect is assumed here.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint tag;
\end_layout

\begin_layout Plain Layout

MESIState state;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

this.cache.getBlock(set, way, tag, state);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint srcSet = set;
\end_layout

\begin_layout Plain Layout

uint srcWay = way;
\end_layout

\begin_layout Plain Layout

uint srcTag = tag;
\end_layout

\begin_layout Plain Layout

CoherentCacheNode target = this.next;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

this.invalidate(null, set, way, 
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    if(state == MESIState.INVALID) {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback(false);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else if(state == MESIState.MODIFIED) {
\end_layout

\begin_layout Plain Layout

      this.schedule(
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          target.evictReceive(this, srcTag, true, 
\end_layout

\begin_layout Plain Layout

            (bool hasError)
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

              this.schedule(
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                  this.evictReplyReceive(hasError, srcSet, srcWay, onCompletedCal
lback);
\end_layout

\begin_layout Plain Layout

                }, 2);
\end_layout

\begin_layout Plain Layout

            });
\end_layout

\begin_layout Plain Layout

        }, 2);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      this.schedule(
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          target.evictReceive(this, srcTag, false, 
\end_layout

\begin_layout Plain Layout

            (bool hasError)
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

              this.schedule(
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                  this.evictReplyReceive(hasError, srcSet, srcWay, onCompletedCal
lback);
\end_layout

\begin_layout Plain Layout

                }, 2);
\end_layout

\begin_layout Plain Layout

            });
\end_layout

\begin_layout Plain Layout

        }, 2);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

evictReceive(source, addr, isWriteback, onReceivedReplyCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.findAndLock(addr, false, false, false, 
\end_layout

\begin_layout Plain Layout

      (bool hasError, uint set, uint way, MESIState state, uint tag, DirLock
 dirLock)
\end_layout

\begin_layout Plain Layout

      {       
\end_layout

\begin_layout Plain Layout

        if(!hasError) {
\end_layout

\begin_layout Plain Layout

          if(!isWriteback) {
\end_layout

\begin_layout Plain Layout

            this.evictProcess(source, set, way, dirLock, onReceiveReplyCallback);
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

          else {
\end_layout

\begin_layout Plain Layout

            this.invalidate(source, set, way, 
\end_layout

\begin_layout Plain Layout

              {
\end_layout

\begin_layout Plain Layout

                if(state == MESIState.SHARED) {
\end_layout

\begin_layout Plain Layout

                  this.writeRequest(this.next, tag,
\end_layout

\begin_layout Plain Layout

                    (bool hasError)
\end_layout

\begin_layout Plain Layout

                    {
\end_layout

\begin_layout Plain Layout

                      this.evictWritebackFinish(
\end_layout

\begin_layout Plain Layout

                        source, hasError, set, way, tag, dirLock, onReceiveReply
Callback);
\end_layout

\begin_layout Plain Layout

                    });
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

                else {
\end_layout

\begin_layout Plain Layout

                  this.evictWritebackFinish(
\end_layout

\begin_layout Plain Layout

                    source, false, set, way, tag, dirLock, onReceiveReplyCallbac
k);
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

              });
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        else {
\end_layout

\begin_layout Plain Layout

          onReceiveReplyCallback(true);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

      });
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

evictWritebackFinish(source, hasError, set, way, tag, dirLock, onReceivedReplyCa
llback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(!hasError) {
\end_layout

\begin_layout Plain Layout

  this.cache.setBlock(set, way, tag, MESIState.MODIFIED);
\end_layout

\begin_layout Plain Layout

  this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

  this.evictProcess(source, set, way, dirLock, onReceiveReplyCallback);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

  dirLock.unlock();
\end_layout

\begin_layout Plain Layout

  onReceiveReplyCallback(true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

evictProcess(source, set, way, dirLock, onReceivedReplyCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

dirEntry.unsetSharer(source);
\end_layout

\begin_layout Plain Layout

if(dirEntry.owner == source) {
\end_layout

\begin_layout Plain Layout

  dirEntry.owner = null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

dirLock.unlock();
\end_layout

\begin_layout Plain Layout

onReceiveReplyCallback(false);
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

evictReplyReceive(hasError, srcSet, srcWay, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.schedule(
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    if(!hasError) {
\end_layout

\begin_layout Plain Layout

      this.cache.setBlock(srcSet, srcWay, 0, MESIState.INVALID);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    onCompletedCallback(hasError);
\end_layout

\begin_layout Plain Layout

  }, 2);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
readRequest(target, addr, onCompletedCallback)
\family default
.
\begin_inset Newline newline
\end_inset

Cconstant-latency (2) on-chip interconnect is assumed here.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.schedule(
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    target.readRequestReceive(this, addr, onCompletedCallback);
\end_layout

\begin_layout Plain Layout

  }, 2);
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

readRequestReceive(source, addr, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.findAndLock(addr, this.next == source, true, false,
\end_layout

\begin_layout Plain Layout

  (bool hasError, uint set, uint way, MESIState state, uint tag, DirLock
 dirLock)
\end_layout

\begin_layout Plain Layout

  {       
\end_layout

\begin_layout Plain Layout

    if(!hasError) {
\end_layout

\begin_layout Plain Layout

      if(source.next == this) {
\end_layout

\begin_layout Plain Layout

        this.readRequestUpdown(source, set, way, tag, state, dirLock, onCompleted
Callback);
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      else {
\end_layout

\begin_layout Plain Layout

        this.readRequestDownup(set, way, tag, dirLock, onCompletedCallback);
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      this.schedule(
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          onCompletedCallback(true, false);
\end_layout

\begin_layout Plain Layout

        }, 2);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset


\family default
r
\family typewriter
eadRequestUpdown(source, set, way, tag, state, dirLock, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint pending = 1;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

if(state != MESIState.INVALID) {
\end_layout

\begin_layout Plain Layout

  DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  if(dirEntry.owner !is null && dirEntry.owner != source) {
\end_layout

\begin_layout Plain Layout

    pending++;
\end_layout

\begin_layout Plain Layout

    this.readRequest(dirEntry.owner, tag,
\end_layout

\begin_layout Plain Layout

      (bool hasError, bool isShared)
\end_layout

\begin_layout Plain Layout

      {
\end_layout

\begin_layout Plain Layout

        this.readRequestUpdownFinish(source, set, way, dirLock, pending,
 onCompletedCallback);
\end_layout

\begin_layout Plain Layout

      });
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  this.readRequestUpdownFinish(source, set, way, dirLock, pending, onCompletedCal
lback);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

  this.readRequest(this.next, tag,
\end_layout

\begin_layout Plain Layout

    (bool hasError, bool isShared)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      if(!hasError) {
\end_layout

\begin_layout Plain Layout

        this.cache.setBlock(set, way, tag, isShared ? MESIState.SHARED : MESIState.E
XCLUSIVE);
\end_layout

\begin_layout Plain Layout

        this.readRequestUpdownFinish(source, set, way, dirLock, pending,
 onCompletedCallback);
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      else {
\end_layout

\begin_layout Plain Layout

        dirLock.unlock();
\end_layout

\begin_layout Plain Layout

        this.schedule(
\end_layout

\begin_layout Plain Layout

          {
\end_layout

\begin_layout Plain Layout

            onCompletedCallback(true, false);
\end_layout

\begin_layout Plain Layout

          }, 2);
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

readRequestUpdownFinish(source, set, way, dirLock, ref pending, onCompletedCallb
ack)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

pending--;
\end_layout

\begin_layout Plain Layout

if(pending == 0) {
\end_layout

\begin_layout Plain Layout

  DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

  if(dirEntry.owner !is null && dirEntry.owner != source) {
\end_layout

\begin_layout Plain Layout

    dirEntry.owner = null;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  dirEntry.setSharer(source);
\end_layout

\begin_layout Plain Layout

  if(!dirEntry.isShared) {
\end_layout

\begin_layout Plain Layout

    dirEntry.owner = source;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

  dirLock.unlock();
\end_layout

\begin_layout Plain Layout

  this.schedule(
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback(false, dirEntry.isShared);
\end_layout

\begin_layout Plain Layout

    }, 2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

readRequestDownup(set, way, tag, dirLock, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint pending = 1;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

if(dirEntry.owner !is null) {
\end_layout

\begin_layout Plain Layout

  pending++;
\end_layout

\begin_layout Plain Layout

  this.readRequest(dirEntry.owner, tag,
\end_layout

\begin_layout Plain Layout

    (bool hasError, bool isShared)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      this.readRequestDownUpFinish(set, way, tag, dirLock, pending, onCompletedCa
llback);
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

this.readRequestDownUpFinish(set, way, tag, dirLock, pending, onCompletedCallback
);
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

readRequestDownUpFinish(set, way, tag, dirLock, ref pending, onCompletedCallback
)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

pending--;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(pending == 0) {
\end_layout

\begin_layout Plain Layout

  DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

  dirEntry.owner = null;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  this.cache.setBlock(set, way, tag, MESIState.SHARED);
\end_layout

\begin_layout Plain Layout

  this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

  dirLock.unlock();
\end_layout

\begin_layout Plain Layout

  this.schedule(
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback(false, false);
\end_layout

\begin_layout Plain Layout

    }, 2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
writeRequest(target, addr, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.schedule(
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    target.writeRequestReceive(this, addr, onCompletedCallback);
\end_layout

\begin_layout Plain Layout

  }, 2);
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

writeRequestReceive(source, addr, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.findAndLock(addr, this.next == source, false, false,
\end_layout

\begin_layout Plain Layout

  (bool hasError, uint set, uint way, MESIState state, uint tag, DirLock
 dirLock)
\end_layout

\begin_layout Plain Layout

  {       
\end_layout

\begin_layout Plain Layout

    if(!hasError) {
\end_layout

\begin_layout Plain Layout

      this.invalidate(source, set, way, 
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          if(source.next == this) {
\end_layout

\begin_layout Plain Layout

            if(state == MESIState.MODIFIED || state == MESIState.EXCLUSIVE)
 {
\end_layout

\begin_layout Plain Layout

              writeRequestUpdownFinish(
\end_layout

\begin_layout Plain Layout

                source, false, set, way, tag, state, dirLock, onCompletedCallbac
k);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            else {
\end_layout

\begin_layout Plain Layout

              this.writeRequest(this.next, tag,
\end_layout

\begin_layout Plain Layout

                (bool hasError)
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                  writeRequestUpdownFinish(
\end_layout

\begin_layout Plain Layout

                    source, hasError, set, way, tag, state, dirLock, onCompleted
Callback);
\end_layout

\begin_layout Plain Layout

                });
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

          else {
\end_layout

\begin_layout Plain Layout

            this.cache.setBlock(set, way, 0, MESIState.INVALID);
\end_layout

\begin_layout Plain Layout

            dirLock.unlock();
\end_layout

\begin_layout Plain Layout

            this.schedule(
\end_layout

\begin_layout Plain Layout

              {
\end_layout

\begin_layout Plain Layout

                onCompletedCallback(false);
\end_layout

\begin_layout Plain Layout

              }, 2);
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        });
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      this.schedule(
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          onCompletedCallback(true);
\end_layout

\begin_layout Plain Layout

        }, 2);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  });
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset

writeRequestUpdownFinish(source, hasError, set, way, tag, state, dirLock,
 onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(!hasError) {
\end_layout

\begin_layout Plain Layout

  DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

  dirEntry.setSharer(source);
\end_layout

\begin_layout Plain Layout

  dirEntry.owner = source;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  this.cache.accessBlock(set, way);
\end_layout

\begin_layout Plain Layout

  if(state != MESIState.MODIFIED) {
\end_layout

\begin_layout Plain Layout

    this.cache.setBlock(set, way, tag, MESIState.EXCLUSIVE);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  dirLock.unlock();
\end_layout

\begin_layout Plain Layout

  this.schedule(
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback(false);
\end_layout

\begin_layout Plain Layout

    }, 2);                  
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

  dirLock.unlock();
\end_layout

\begin_layout Plain Layout

  this.schedule(
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback(true);
\end_layout

\begin_layout Plain Layout

    }, 2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
invalidate(except, set, way, onCompletedCallback)
\family default
.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint tag;
\end_layout

\begin_layout Plain Layout

    MESIState state;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    this.cache.getBlock(set, way, tag, state);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    uint pending = 1;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    DirEntry dirEntry = this.cache.dir.dirEntries[set][way];
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    CoherentCacheNode[] sharersToRemove;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    foreach(sharer; dirEntry.sharers) {
\end_layout

\begin_layout Plain Layout

      if(sharer != except) {
\end_layout

\begin_layout Plain Layout

        sharersToRemove ~= sharer;
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    foreach(sharer; sharersToRemove) {
\end_layout

\begin_layout Plain Layout

      dirEntry.unsetSharer(sharer);
\end_layout

\begin_layout Plain Layout

      if(dirEntry.owner == sharer) {
\end_layout

\begin_layout Plain Layout

        dirEntry.owner = null;
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      
\end_layout

\begin_layout Plain Layout

      this.writeRequest(sharer, tag,
\end_layout

\begin_layout Plain Layout

        (bool hasError)
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

          pending--;
\end_layout

\begin_layout Plain Layout

          
\end_layout

\begin_layout Plain Layout

          if(pending == 0) {
\end_layout

\begin_layout Plain Layout

            onCompletedCallback();
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        });
\end_layout

\begin_layout Plain Layout

      pending++;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    pending--;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if(pending == 0) {
\end_layout

\begin_layout Plain Layout

      onCompletedCallback();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\end_body
\end_document
