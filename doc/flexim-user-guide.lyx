#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{graphicx}
\usepackage{color}
\usepackage{moreverb}
\usepackage{multirow}
\usepackage{makeidx}
\usepackage{array}
\usepackage{longtable}


\renewcommand{\baselinestretch}{1}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
The Flexim User Guide
\begin_inset Newline newline
\end_inset


\size footnotesize
(
\color red
Pre-release, Work-in-Progress
\color inherit
)
\end_layout

\begin_layout Author
Min Cai <
\begin_inset CommandInset href
LatexCommand href
target "itecgo@163.com"
type "mailto:"

\end_inset

>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Beijing Institute of Technology
\begin_inset Newline newline
\end_inset

Beijing, China
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
Welcome to Flexim! Flexim is an open-source, modular and highly configurable
 architectural simulator for evaluating emerging multicore processors.
 It can run statically compiled MIPS32 Little-Endian (LE) programs.
 
\end_layout

\begin_layout Standard
For the latest Flexim code, please visit the project's website on Github:
 
\begin_inset CommandInset href
LatexCommand href
target "http://github.com/mcai/flexim"

\end_inset

.
 
\end_layout

\begin_layout Section
Key Features
\end_layout

\begin_layout Enumerate
Architectural
\end_layout

\begin_deeper
\begin_layout Itemize
Simulation of a classic five-stage superscalar pipeline with out-of-order
 execution.
 
\end_layout

\begin_layout Itemize
Multi-level memory hierarchy with the directory-based MESI cache coherence
 protocol.
 
\end_layout

\begin_layout Itemize
Support for Syscall-emulation mode simulation (i.e., application only, no
 need to boot an OS).
 
\end_layout

\begin_layout Itemize
Correct execution of several state-of-the-art benchmark suites, e.g., wcet_bench,
 Olden and CPU2006.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Non-architectural
\end_layout

\begin_deeper
\begin_layout Itemize
Developed from scratch in the object-oriented system programming language
 D 2.0.
 Great efforts are made to advocate software engineering practices in the
 simulator construction.
 
\end_layout

\begin_layout Itemize
A powerful infrastructure that provides common functionalities such as eventing,
 logging and XML I/O.
 
\end_layout

\begin_layout Itemize
Pervasive use of XML-based I/O for architectural, workload and experiment
 configurations and statistics.
 
\end_layout

\begin_layout Itemize
Easy to use.
 No scripting.
 Only required are a statically compiled simulator executable and a few
 XML files.
 
\end_layout

\end_deeper
\begin_layout Section
Development Progress
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main Category
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current Progress
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Functional Simulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int.
 Inst.
 Decoding & Execution
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fp.
 Inst.
 Decoding & Execution
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Call Emulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK for wcet-bench, mst, em3d, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MIPS LE ELF Exe.
 Loader
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can run statically compiled programs
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Performance Simulation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Five-stage OoO pipelining
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Being rewritten; in good progress
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set-associative cache structure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cache coherence
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Being rewritten; in good progress
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On-chip interconnect
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Planned
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface to external DRAM simulators
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
To be planned
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supporting Infrastructure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eventing and callback mechanisms
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK, pervasive use in existing code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Categorized logging mechanism
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK, limited use in existing code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML-based I/O for configs and stats 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Plotting and table generation for experiments
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Planned
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
System Requirements
\end_layout

\begin_layout Enumerate
Make sure that you have a Ubuntu 10.04 Linux machine.
 Other popular Linux distributions may work as well if you are lucky enough.
 
\end_layout

\begin_layout Enumerate
Make sure that you have the latest DMD 2.0 compiler installed.
 If not, go to this page and download "dmd D 2.0 compiler 1-click install
 for Ubuntu": 
\begin_inset CommandInset href
LatexCommand href
target "http://www.digitalmars.com/d/download.html"

\end_inset

.
\end_layout

\begin_layout Section
How to Build and Run Flexim
\end_layout

\begin_layout Enumerate
Unpack the zip or tar file containing the Flexim source.
 
\end_layout

\begin_layout Enumerate
In the main directory of the distribution, you can 
\end_layout

\begin_deeper
\begin_layout Itemize
build Flexim using the command: '
\family typewriter
make
\family default
';
\end_layout

\begin_layout Itemize
remove all the built files using the command: '
\family typewriter
make clean
\family default
'.
 
\end_layout

\begin_layout Standard
By default, the flexim binary is placed in the bin/ folder.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Download and unpack cross-compiler-mipsel.tar.bz2 from 
\begin_inset CommandInset href
LatexCommand href
target "http://github.com/mcai/flexim/downloads/"

\end_inset

.
 Use it to compile MIPS32 LE programs to be simulated by Flexim.
 
\end_layout

\begin_layout Enumerate
In the subdirectory build/, you can start simulation with the default simulation
 configuration using the command: 
\begin_inset Quotes eld
\end_inset


\family typewriter
./flexim
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
./flexim --experiment=<experiment-name>
\family default

\begin_inset Quotes erd
\end_inset

.
 Benchmarks and experiments are specified in the subdirectory configs/benchmarks
/ and configs/experiments/, respectively.
\end_layout

\begin_layout Enumerate
You can find configuration and statistics files in the configs/ and stats/
 subdirectories, respectively.
 Some sample XML files are provided for your reference.
\end_layout

\begin_layout Enumerate
Useful tip: As with all other open source projects, you can learn more by
 digging into the Flexim source code.
\end_layout

\begin_layout Section
The Structure of the File
\end_layout

\begin_layout Standard
The whole development of the Flexim simulator encompasses three main categories
 of functionalities: functional simulation, performance simulation and supportin
g infrastructure.
 Chapter 2 focuses on functional simulation.
 Chapter 3 focuses on performance simulation.
 Chapter 4 focuses on supporting infrastructure.
\end_layout

\begin_layout Chapter
Functional Simulation
\end_layout

\begin_layout Section
ELF-Formatted MIPS Little-Endian Executable Loader
\end_layout

\begin_layout Section
Instruction Decoding and Execution
\end_layout

\begin_layout Standard
In Flexim, there are two kinds of instructions, i.e., static instructions
 and dynamic instructions.
 A static instruction represents a decoded instruction that fetched from
 memory, and a dynamic instruction represents a dynamically-scheduled instructio
n.
\end_layout

\begin_layout Subsection
Basic Instructions
\end_layout

\begin_layout Enumerate
nop.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
syscall.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.syscall(thread.intRegs[2]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sll.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RT]] << this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sllv.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RT]] << bits(thread.intRegs[this[RS]
], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sra.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RT]] >> this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
srav.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RT]]
\end_layout

\begin_layout Plain Layout

				>> bits(thread.intRegs[this[RS]], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
srl.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RT]] >> this[SA];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
srlv.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RT]]
\end_layout

\begin_layout Plain Layout

				>> bits(thread.intRegs[this[RS]], 4, 0);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Branching Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of branching operations.
\begin_inset Newline newline
\end_inset

Displacement calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.displacement = sext(this[OFFSET] << 2, 16);
\end_layout

\end_inset

Branching function: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.nnpc = thread.npc + this.displacement;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
b.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.branch(thread);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bal.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.branch(thread);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
beq.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] == cast(int) thread.intRegs[this[RT]])
 {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
beqz.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] == 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bgez.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] >= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bgezal.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] >= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bgtz.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] > 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
blez.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] <= 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bltz.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] < 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bltzal.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] < 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bne.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] != cast(int) thread.intRegs[this[RT]])
 {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bnez.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

if(cast(int) thread.intRegs[this[RS]] != 0) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bc1f.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bc1t.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bc1fl.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	thread.npc = thread.nnpc;
\end_layout

\begin_layout Plain Layout

	thread.nnpc = thread.nnpc + uint.sizeof;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
bc1tl.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

bool cond = getFCC(fcsr, this[BRANCH_CC]) == 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(cond) {
\end_layout

\begin_layout Plain Layout

	this.branch(thread);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	thread.npc = thread.nnpc;
\end_layout

\begin_layout Plain Layout

	thread.nnpc = thread.nnpc + uint.sizeof;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Jumping Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of jumping operations.
\begin_inset Newline newline
\end_inset

Abstract definition of target PC calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

abstract uint targetPc(Thread thread);
\end_layout

\end_inset

Jumping function: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.nnpc = addr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
j.
\begin_inset Newline newline
\end_inset

Target PC calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return mbits(thread.npc, 32, 28) | this.target;
\end_layout

\end_inset

Execution: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
jal.
\begin_inset Newline newline
\end_inset

Target PC calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return mbits(thread.npc, 32, 28) | this.target;
\end_layout

\end_inset

Execution: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[ReturnAddressReg] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
jalr.
\begin_inset Newline newline
\end_inset

Target PC calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]];
\end_layout

\end_inset

Execution: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.nnpc;
\end_layout

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
jr.
\begin_inset Newline newline
\end_inset

Target PC calculation:
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]];
\end_layout

\end_inset

Execution: 
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.jump(thread, this.targetPc(thread));
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Floating Point Arithmetic Instructions
\end_layout

\begin_layout Enumerate
add_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs + ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sub_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs - ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mul_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs * ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
div_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double fd = fs / ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sqrt_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = sqrt(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
abs_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = fabs(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
neg_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

double fd = -1 * fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mov_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
add_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs + ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sub_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs - ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mul_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float fd = fs * ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
div_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = fs / ft;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sqrt_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = sqrt(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
abs_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = fabs(fs);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
neg_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

float fd = -fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mov_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_d_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_w_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

uint fd = cast(uint) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_l_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

ulong fd = cast(ulong) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_s_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_w_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

uint fd = cast(uint) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_l_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

ulong fd = cast(ulong) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_s_w.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_d_w.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_s_l.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong fs = thread.floatRegs.getUlong(this[FS]);
\end_layout

\begin_layout Plain Layout

float fd = cast(float) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setFloat(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cvt_d_l.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong fs = thread.floatRegs.getUlong(this[FS]);
\end_layout

\begin_layout Plain Layout

double fd = cast(double) fs;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.floatRegs.setDouble(fd, this[FD]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
c_<cond>_d type instructions, which include c_f_d, c_un_d, c_eq_d, c_ueq_d,
 c_olt_d, c_ult_d, c_ole_d, c_ule_d, c_sf_d, c_ngle_d, c_seq_d, c_ngl_d,
 c_lt_d, c_nge_d, c_le_d and c_ngt_d.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

double fs = thread.floatRegs.getDouble(this[FS]);
\end_layout

\begin_layout Plain Layout

double ft = thread.floatRegs.getDouble(this[FT]);
\end_layout

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

bool less;
\end_layout

\begin_layout Plain Layout

bool equal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool unordered = isnan(fs) || isnan(ft);
\end_layout

\begin_layout Plain Layout

if(unordered) {
\end_layout

\begin_layout Plain Layout

	equal = false;
\end_layout

\begin_layout Plain Layout

	less = false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	equal = fs == ft;
\end_layout

\begin_layout Plain Layout

	less = fs < ft;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint cond = this[COND];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(((cond&0x4) && less)||((cond&0x2) && equal)||((cond&0x1) && unordered))
 {
\end_layout

\begin_layout Plain Layout

	setFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	clearFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.fcsr = fcsr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
c_<cond>_s type instructions, which include c_f_s, c_un_s, c_eq_s, c_ueq_s,
 c_olt_s, c_ult_s, c_ole_s, c_ule_s, c_sf_s, c_ngle_s, c_seq_s, c_ngl_s,
 c_lt_s, c_nge_s, c_le_s and c_ngt_s.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

float fs = thread.floatRegs.getFloat(this[FS]);
\end_layout

\begin_layout Plain Layout

float ft = thread.floatRegs.getFloat(this[FT]);
\end_layout

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

bool less;
\end_layout

\begin_layout Plain Layout

bool equal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool unordered = isnan(fs) || isnan(ft);
\end_layout

\begin_layout Plain Layout

if(unordered) {
\end_layout

\begin_layout Plain Layout

	equal = false;
\end_layout

\begin_layout Plain Layout

	less = false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	equal = fs == ft;
\end_layout

\begin_layout Plain Layout

	less = fs < ft;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint cond = this[COND];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(((cond&0x4) && less)||((cond&0x2) && equal)||((cond&0x1) && unordered))
 {
\end_layout

\begin_layout Plain Layout

	setFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	clearFCC(fcsr, this[CC]);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.fcsr = fcsr;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mfc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fs = thread.floatRegs.getUint(this[FS]);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = fs;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
cfc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint fcsr = thread.miscRegs.fcsr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(this[FS] == 31) {
\end_layout

\begin_layout Plain Layout

	rt = fcsr;
\end_layout

\begin_layout Plain Layout

	thread.intRegs[this[RT]] = rt;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mtc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(rt, this[FS]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
ctc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(this[FS]) {
\end_layout

\begin_layout Plain Layout

	thread.miscRegs.fcsr = rt;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integer Arithmetic Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of integer arithmetic operations.
\begin_inset Newline newline
\end_inset

imm.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.imm = cast(short) machInst[INTIMM];
\end_layout

\end_inset

zextImm.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.zextImm = 0x0000FFFF & machInst[INTIMM];
\end_layout

\end_inset

sextImm.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.sextImm = sext(machInst[INTIMM], 16);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
add.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				+ cast(int) thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Add: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
addi.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] + this.sextImm;
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Addi: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
addiu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] + this.sextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
addu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				+ cast(int) thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sub.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				- cast(int) thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

logging.warn(LogCategory.INSTRUCTION, "Sub: overflow trap not implemented.");
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
subu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				- cast(int) thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
and.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] & thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
andi.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] & this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
nor.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = ~(thread.intRegs[this[RS]] | thread.intRegs[this[RT]]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
or.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] | thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
ori.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] | this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
xor.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.intRegs[this[RS]] ^ thread.intRegs[this[RT]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
xori.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = thread.intRegs[this[RS]] ^ this.zextImm;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
slt.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(int) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				< cast(int) thread.intRegs[this[RT]] ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
slti.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(int) thread.intRegs[this[RS]] < this.sextImm
 ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sltiu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = cast(uint) thread.intRegs[this[RS]] < this.zextImm
 ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sltu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = cast(uint) thread.intRegs[this[RS]]
\end_layout

\begin_layout Plain Layout

				< cast(uint) thread.intRegs[this[RT]] ? 1 : 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lui.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RT]] = this.imm << 16;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
divu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong rs = 0;
\end_layout

\begin_layout Plain Layout

ulong rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = 0;
\end_layout

\begin_layout Plain Layout

uint hi = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = thread.intRegs[this[RS]];
\end_layout

\begin_layout Plain Layout

rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(rt != 0) {
\end_layout

\begin_layout Plain Layout

	lo = cast(uint) (rs / rt);
\end_layout

\begin_layout Plain Layout

	hi = cast(uint) (rs % rt);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
div.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

long rs = 0;
\end_layout

\begin_layout Plain Layout

long rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = 0;
\end_layout

\begin_layout Plain Layout

uint hi = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = sext(thread.intRegs[this[RS]], 32);
\end_layout

\begin_layout Plain Layout

rt = sext(thread.intRegs[this[RT]], 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(rt != 0) {
\end_layout

\begin_layout Plain Layout

	lo = cast(uint) (rs / rt);
\end_layout

\begin_layout Plain Layout

	hi = cast(uint) (rs % rt);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mflo.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.miscRegs.lo;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mfhi.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.intRegs[this[RD]] = thread.miscRegs.hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mtlo.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.miscRegs.lo = thread.intRegs[this[RD]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mthi.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

thread.miscRegs.hi = thread.intRegs[this[RD]];
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
mult.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

long rs = 0;
\end_layout

\begin_layout Plain Layout

long rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = sext(thread.intRegs[this[RS]], 32);
\end_layout

\begin_layout Plain Layout

rt = sext(thread.intRegs[this[RT]], 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

long val = rs * rt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = cast(uint) bits64(val, 31, 0);
\end_layout

\begin_layout Plain Layout

uint hi = cast(uint) bits64(val, 63, 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
multu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong rs = 0;
\end_layout

\begin_layout Plain Layout

ulong rt = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = thread.intRegs[this[RS]];
\end_layout

\begin_layout Plain Layout

rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ulong val = rs * rt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint lo = cast(uint) bits64(val, 31, 0);
\end_layout

\begin_layout Plain Layout

uint hi = cast(uint) bits64(val, 63, 32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.miscRegs.lo = lo;
\end_layout

\begin_layout Plain Layout

thread.miscRegs.hi = hi;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Memory Access Instructions
\end_layout

\begin_layout Enumerate
Common operations found in the implementation of memory access operations.
\begin_inset Newline newline
\end_inset

displacement calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

this.displacement = sext(machInst[OFFSET], 16);
\end_layout

\end_inset

basic effective address calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.intRegs[this[RS]] + this.displacement;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lb.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

byte mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readByte(this.ea(thread), cast(ubyte*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lbu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ubyte mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readByte(this.ea(thread), &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lh.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

short mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readHalfWord(this.ea(thread), cast(ushort*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lhu.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ushort mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readHalfWord(this.ea(thread), &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lw.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), cast(uint*) &mem);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lwl.
\begin_inset Newline newline
\end_inset

overriden effective address calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset


\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem_shift = 24 - 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = (mem << mem_shift) | (thread.intRegs[this[RT]] & mask(mem_shift));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = rt;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lwr.
\begin_inset Newline newline
\end_inset

overriden effective address calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset


\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem_shift = 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint rt = (thread.intRegs[this[RT]] & (mask(mem_shift) << (32 - mem_shift)))
\end_layout

\begin_layout Plain Layout

				| (mem >> mem_shift);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = rt;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
ll.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = 0;		
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), &mem);		
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = mem;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lwc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readWord(this.ea(thread), &mem);			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUint(mem, this[FT]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
ldc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong mem = 0;
\end_layout

\begin_layout Plain Layout

thread.mem.readDoubleWord(this.ea(thread), &mem);			
\end_layout

\begin_layout Plain Layout

thread.floatRegs.setUlong(mem, this[FT]);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sb.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ubyte mem = cast(ubyte) bits(thread.intRegs[this[RT]], 7, 0);
\end_layout

\begin_layout Plain Layout

thread.mem.writeByte(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sh.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ushort mem = cast(ushort) bits(thread.intRegs[this[RT]], 15, 0);
\end_layout

\begin_layout Plain Layout

thread.mem.writeHalfWord(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sw.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint mem = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
swl.
\begin_inset Newline newline
\end_inset

overriden effective address calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset


\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint reg_shift = 24 - 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

uint mem_shift = 32 - reg_shift;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mem = (mem & (mask(reg_shift) << mem_shift)) | (thread.intRegs[this[RT]]
 >> reg_shift);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(ea, mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
swr.
\begin_inset Newline newline
\end_inset

overriden effective address calculation.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

return addr & ~3;
\end_layout

\end_inset


\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint addr = thread.intRegs[this[RS]] + this.displacement;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint ea = addr & ~3;
\end_layout

\begin_layout Plain Layout

uint byte_offset = addr & 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint mem = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.readWord(ea, &mem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint reg_shift = 8 * byte_offset;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mem = thread.intRegs[this[RT]] << reg_shift | (mem & (mask(reg_shift)));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(ea, mem);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sc.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint rt = thread.intRegs[this[RT]];
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), rt);
\end_layout

\begin_layout Plain Layout

thread.intRegs[this[RT]] = 1;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
swc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint ft = thread.floatRegs.getUint(this[FT]);			
\end_layout

\begin_layout Plain Layout

thread.mem.writeWord(this.ea(thread), ft);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
sdc1.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

ulong ft = thread.floatRegs.getUlong(this[FT]);			
\end_layout

\begin_layout Plain Layout

thread.mem.writeDoubleWord(this.ea(thread), ft);
\end_layout

\end_inset


\end_layout

\begin_layout Section
System Call Emulation
\end_layout

\begin_layout Standard
A few system calls are emulated for the correct execution of the whole wcet_benc
h benchmark suite, and mst and em3d from the Olden benchmark suite.
\end_layout

\begin_layout Enumerate
exit.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

logging.haltf(LogCategory.SYSCALL, "target called exit(%d)", thread.getSyscallArg(0
) & 0xff);
\end_layout

\begin_layout Plain Layout

return 1;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
read.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

size_t count = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* buf = malloc(count);
\end_layout

\begin_layout Plain Layout

ssize_t ret = core.sys.posix.unistd.read(fd, buf, count);
\end_layout

\begin_layout Plain Layout

if(ret > 0) {
\end_layout

\begin_layout Plain Layout

	thread.mem.writeBlock(buf_addr, ret, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
write.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

size_t count = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* buf = malloc(count);
\end_layout

\begin_layout Plain Layout

thread.mem.readBlock(buf_addr, count, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

ssize_t ret = core.sys.posix.unistd.write(fd, buf, count);
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
open.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

char path[MAXBUFSIZE];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint addr = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint tgtFlags = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

uint mode = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int strlen = thread.mem.readString(addr, MAXBUFSIZE, &path[0]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// translate open flags
\end_layout

\begin_layout Plain Layout

int hostFlags = 0;
\end_layout

\begin_layout Plain Layout

foreach(t; openFlagTable) {
\end_layout

\begin_layout Plain Layout

	if(tgtFlags & t.tgtFlag) {
\end_layout

\begin_layout Plain Layout

		tgtFlags &= ~t.tgtFlag;
\end_layout

\begin_layout Plain Layout

		hostFlags |= t.hostFlag;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// any target flags left?
\end_layout

\begin_layout Plain Layout

if(tgtFlags != 0)
\end_layout

\begin_layout Plain Layout

		logging.fatalf(LogCategory.SYSCALL,
\end_layout

\begin_layout Plain Layout

			"Syscall: open: cannot decode flags 0x%x", tgtFlags);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Adjust path for current working directory
\end_layout

\begin_layout Plain Layout

path = thread.process.fullPath(to!(string)(path));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// open the file
\end_layout

\begin_layout Plain Layout

int fd = open(path.ptr, hostFlags, mode);
\end_layout

\begin_layout Plain Layout

return fd;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
close.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

int ret = close(fd);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
lseek.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fildes = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

off_t offset = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

int whence = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

off_t ret = lseek(fildes, offset, whence);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getpid.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.pid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getuid.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.uid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
brk.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

uint oldbrk, newbrk;
\end_layout

\begin_layout Plain Layout

uint oldbrk_rnd, newbrk_rnd;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

newbrk = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

oldbrk = thread.process.brk;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(newbrk == 0) {
\end_layout

\begin_layout Plain Layout

	return thread.process.brk;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

newbrk_rnd = Rounding!(uint).roundUp(newbrk, MEM_PAGESIZE);
\end_layout

\begin_layout Plain Layout

oldbrk_rnd = Rounding!(uint).roundUp(oldbrk, MEM_PAGESIZE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(newbrk > oldbrk) {
\end_layout

\begin_layout Plain Layout

	thread.mem.map(oldbrk_rnd, newbrk_rnd - oldbrk_rnd,
\end_layout

\begin_layout Plain Layout

		MemoryAccessType.READ | MemoryAccessType.WRITE);
\end_layout

\begin_layout Plain Layout

} else if(newbrk < oldbrk) {
\end_layout

\begin_layout Plain Layout

	thread.mem.unmap(newbrk_rnd, oldbrk_rnd - newbrk_rnd);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

thread.process.brk = newbrk;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return thread.process.brk;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getgid.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.gid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
geteuid.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.euid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
getegid.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

return thread.process.egid;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
fstat.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint buf_addr = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

stat_t* buf = cast(stat_t*)(malloc(stat_t.sizeof));
\end_layout

\begin_layout Plain Layout

int ret = fstat(fd, buf);
\end_layout

\begin_layout Plain Layout

if(ret >= 0) {
\end_layout

\begin_layout Plain Layout

	thread.mem.writeBlock(buf_addr, stat_t.sizeof, cast(ubyte*) buf);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

free(buf);
\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
uname.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

utsname un = {"Linux", "sim", "2.6", "Tue Apr 5 12:21:57 UTC 2005", "mips"};
\end_layout

\begin_layout Plain Layout

thread.mem.writeBlock(thread.getSyscallArg(0), un.sizeof, cast(ubyte*) &un);
\end_layout

\begin_layout Plain Layout

return 0;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
_llseek.
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,language=Java"
inline false
status open

\begin_layout Plain Layout

int fd = thread.getSyscallArg(0);
\end_layout

\begin_layout Plain Layout

uint offset_high = thread.getSyscallArg(1);
\end_layout

\begin_layout Plain Layout

uint offset_low = thread.getSyscallArg(2);
\end_layout

\begin_layout Plain Layout

uint result_addr = thread.getSyscallArg(3);
\end_layout

\begin_layout Plain Layout

int whence = thread.getSyscallArg(4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(offset_high == 0) {
\end_layout

\begin_layout Plain Layout

	off_t lseek_ret = lseek(fd, offset_low, whence);
\end_layout

\begin_layout Plain Layout

	if(lseek_ret >= 0) {
\end_layout

\begin_layout Plain Layout

		ret = 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else {
\end_layout

\begin_layout Plain Layout

		ret = -1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

	ret = -1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return ret;
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Performance Simulation
\end_layout

\begin_layout Section
Processor Frontend
\end_layout

\begin_layout Subsection
Branch Prediction
\end_layout

\begin_layout Subsection
The Fetch Stage
\end_layout

\begin_layout Subsection
The Decode Stage
\end_layout

\begin_layout Section
Processor Backend
\end_layout

\begin_layout Standard
A classic five-stage out-of-order issue processor core is modeled after
 the SimpleScalar implementation.
 Methods in class OoOThread implementing the pipeline stages are outlined
 below.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Method Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insts Transfer between Queues
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comments
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
commit()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RUU 
\begin_inset Formula $\longrightarrow$
\end_inset

 <committed>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retiring insts, EAs 
\begin_inset Formula $\dashrightarrow$
\end_inset

 LSQ
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
writeback()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EventQ 
\begin_inset Formula $\dashrightarrow$
\end_inset

 ReadyQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resolving reg deps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
refreshLsq()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LSQ 
\begin_inset Formula $\longrightarrow$
\end_inset

 ReadyQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resolving mem deps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
issue()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReadyQ 
\begin_inset Formula $\longrightarrow$
\end_inset

 EventQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Accessing FUs and data caches
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dispatch()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FetchQ 
\begin_inset Formula $\longrightarrow$
\end_inset

 RUU 
\begin_inset Formula $+$
\end_inset

 LSQ 
\begin_inset Formula $+$
\end_inset

 ReadyQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resolving reg deps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ICache 
\begin_inset Formula $\longrightarrow$
\end_inset

 FetchQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fetching and decoding insts
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Register Renaming
\end_layout

\begin_layout Subsection
The Dispatch Stage
\end_layout

\begin_layout Subsection
The Writeback Stage
\end_layout

\begin_layout Subsection
The Commit Stage
\end_layout

\begin_layout Section
Memory Hierarchy
\end_layout

\begin_layout Subsection
Internal Cache Structure and Cache Coherence
\end_layout

\begin_layout Subsection
On-Chip Interconnect
\end_layout

\begin_layout Subsection
Interface to External DRAM Simulators
\end_layout

\begin_layout Chapter
Supporting Infrastructure
\end_layout

\begin_layout Standard
There are various supporting modules aside the aforementioned main components
 to advocate the reusability of the simulator, in which the ELF program
 loader component is used to load statically compiled MIPS32 little-endian
 executable into the simulator, the event queue component is used extensively
 to event driven the simulator per cycle, and the logging component supports
 configurable logging functionalities that can facilitate development and
 even be useful after release.
\end_layout

\begin_layout Section
Eventing and Callback Mechanisms
\end_layout

\begin_layout Section
Categorized Logging Mechanism
\end_layout

\begin_layout Section
XML-Based Input/Output for Configurations and Statistics
\end_layout

\begin_layout Section
Plotting and Table Generation for Experiments
\end_layout

\begin_layout Chapter
Evaluation
\end_layout

\begin_layout Section
Benchmark Evaluation
\end_layout

\begin_layout Subsection
Criteria
\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Section
Comparison to Other Simulators
\end_layout

\begin_layout Subsection
Results
\end_layout

\end_body
\end_document
